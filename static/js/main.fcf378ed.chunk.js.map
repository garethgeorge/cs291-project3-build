{"version":3,"sources":["config.js","model/initial-state.js","model/state.js","model/index.js","views/loginview.jsx","components/compose.jsx","components/messagelist.jsx","components/userlist.jsx","views/chatview.jsx","components/errorsplash.jsx","App.jsx","serviceWorker.js","index.js"],"names":["API_Host","state","user","connectedToChat","connectedUsers","messages","observable","Object","assign","initialstate","model","formatDate","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","logout","action","disconnect","connectToChat","streamurl","stream","EventSource","addEventListener","event","close","data","JSON","parse","push","name","message","id","console","log","useridx","splice","status","users","map","target","readyState","LoginView","username","password","hostname","config","this","preventDefault","body","axios","post","qs","stringify","headers","then","res","token","error","catch","err","response","prop","value","setState","className","onSubmit","bind","type","onChange","React","Component","observer","Compose","props","sendMessage","onMsgSubmit","placeholder","aria-label","aria-describedby","onMsgChange","key","ChatView","style","height","borderStyle","borderColor","padding","width","color","fontSize","App","content","Boolean","window","location","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fcf378ed.chunk.js","sourcesContent":["export default {\n  API_Host: \"http://localhost:5000\"\n};","const state = {\n    user: null,\n    connectedToChat: false,\n    connectedUsers: [],\n    messages:[],\n}\n\nexport default state;\n","import {observable} from \"mobx\"\nimport initialstate from \"./initial-state\";\n\nconst state = observable(Object.assign({}, initialstate));\n\nexport default state;\n","import state from \"./state\"\nimport initialstate from \"./initial-state\";\nimport {action} from \"mobx\";\n\nconst model = {};\nmodel.state = state\n\nmodel.formatDate = (timestamp) => {\n    var date = new Date(timestamp * 1000);\n    return (\n        date.toLocaleDateString(\"en-US\") +\n        \" \" +\n        date.toLocaleTimeString(\"en-US\")\n    );\n}\n\nmodel.logout = action((logout) => {\n    Object.assign(model.state, initialstate);\n});\n\nmodel.disconnect = action(() => {\n    model.state.connectedToChat = false;\n    model.state.connectedUsers = [];\n})\n\nmodel.connectToChat = (streamurl) => {\n    const stream = new EventSource(\n        streamurl\n    );\n\n    stream.addEventListener(\n        \"Disconnect\",\n        action(event => {\n            stream.close();\n            model.logout();\n        }),\n        false\n    );\n\n    stream.addEventListener(\n        \"Join\",\n        action(event => {\n            var data = JSON.parse(event.data);\n            model.state.connectedUsers.push({name:data.user})\n            model.state.messages.push({\n                timestamp: model.formatDate(data[\"created\"]),\n                message: \" JOIN: \" + data.user,\n                id: event.id,\n            })\n        }),\n        false\n    );\n\n    stream.addEventListener(\n        \"Message\",\n        action(event => {\n            var data = JSON.parse(event.data);\n            console.log(data);\n            model.state.messages.push({\n                timestamp: model.formatDate(data[\"created\"]),\n                message: \" (\" + data.user + \") \" + data.message,\n                id: event.id,\n            })\n        }),\n        false\n    );\n\n    stream.addEventListener(\n        \"Part\",\n        action(event => {\n            var data = JSON.parse(event.data);\n\n            for (const useridx in model.state.connectedUsers){\n                if (model.state.connectedUsers[useridx].name == data.user) {\n                    model.state.connectedUsers.splice(useridx, 1);\n                }\n            }\n            model.state.messages.push({\n                timestamp: model.formatDate(data[\"created\"]),\n                message: \" PART: \" + data.user,\n                id: event.id,\n            })\n        }),\n\n        false\n    );\n\n    stream.addEventListener(\n        \"ServerStatus\",\n        action(event => {\n            var data = JSON.parse(event.data);\n            model.state.messages.push({\n                timestamp: model.formatDate(data[\"created\"]),\n                message: \" STATUS: \" + data.status,\n                id: event.id,\n            })\n        }),\n        false\n    );\n\n    stream.addEventListener(\n        \"Users\",\n        action(event => {\n            model.state.connectedToChat = true;\n            model.state.connectedUsers = JSON.parse(event.data).users.map(user => {\n                return {\n                    name: user,\n                }\n            });\n        }),\n        false\n    );\n\n    stream.addEventListener(\n        \"error\",\n        action(event=> {\n            model.disconnect();\n            if (event.target.readyState == 2) {\n                model.logout();\n            } else {\n                console.log(\"Disconnected, retrying\");\n            }\n        }),\n        false\n    );\n}\n\n\n\nexport default model;\n","import React from 'react';\nimport {action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport qs from 'querystring';\nimport axios from \"axios\";\nimport config from \"../config\";\nimport model from \"../model\";\n\nimport \"./loginview.css\";\n\n// https://www.robinwieruch.de/create-react-app-mobx-decorators\nclass LoginView extends React.Component{\n    state = {\n        username: '',\n        password: '',\n        hostname: 'http://localhost:5000',\n    }\n    \n    onSubmit(event) {\n        config.API_Host = this.state.hostname;\n        \n        event.preventDefault();\n        const body = {\n            username: this.state.username,\n            password: this.state.password,\n        }\n        \n        axios.post(config.API_Host + \"/login\", qs.stringify(body), {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        }).then(action((res) => {\n            console.log(\"response from /login: \" + JSON.stringify(res.data));\n            model.state.user = {\n                token: res.data.token,\n                username: this.state.username,\n                password: this.state.password,\n            }\n            model.state.error = null;\n        })).catch(action((err) => {\n            console.log(err);\n            if (!err.response) {\n                model.state.error = \"Uh oh. Failed to connect to the host.\";\n            } else {\n                model.state.error = \"failed to login, status code: \" + err.response.status;\n            }\n        }));\n    }\n\n    onChange(prop, event) {\n        const state = Object.assign({}, this.state);\n        state[prop] = event.target.value;\n        this.setState(state);\n    }\n\n    render() {\n        return (\n            <div className=\"loginformcontainer\">\n                <form onSubmit = {this.onSubmit.bind(this)}>\n                    <h3>Login</h3>\n                    <span>Hostname</span>\n                    <input name=\"hostname\" \n                           type=\"text\" \n                           onChange={this.onChange.bind(this, \"hostname\")}\n                           value={this.state.hostname} />\n                    <span>Username</span>\n                    <input \n                        name=\"username\" \n                        type=\"text\" \n                        onChange = {this.onChange.bind(this, \"username\")}\n                        value={this.state.username}\n                        />\n                    <br />\n                    <span>Password</span>\n                    <input \n                        name=\"password\" \n                        type=\"text\" \n                        onChange = {this.onChange.bind(this, \"password\")}\n                        value={this.state.password} />\n                    <br/>\n                    <input \n                        type=\"submit\" \n                        />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default observer(LoginView);","import React from 'react';\n\nclass Compose extends React.Component{\n    state={\n        message:\"\",\n    }\n    onMsgChange(prop, event) {\n        const state = Object.assign({}, this.state);\n        state[prop] = event.target.value;\n        this.setState(state);\n    }\n\n    onMsgSubmit(event){\n        event.preventDefault();\n        this.props.sendMessage(this.state.message);\n        const state = Object.assign({}, this.state);\n        state.message = '';\n        this.setState(state);\n    }\n\n    render() {\n        const chatbox = (\n            <form onSubmit={this.onMsgSubmit.bind(this)}>\n                <div className=\"input-group mb-3\">\n                    <input type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"message...\" \n                        aria-label=\"message\" \n                        aria-describedby=\"button-send\" \n                        onChange={this.onMsgChange.bind(this, \"message\")} \n                        value={this.state.message} />\n                    <div className=\"input-group-append\">\n                        <button className=\"btn btn-outline-secondary\" type=\"submit\" id=\"button-send\">Send</button>\n                    </div>\n                </div>\n            </form>\n        );\n        \n        return chatbox;\n    }\n    \n}\n\nexport default Compose;","import React from 'react';\nimport {observer} from \"mobx-react\";\nimport model from \"../model\";\n\nexport default observer(() => {\n    return (\n        <div className=\"container\">\n            {model.state.messages.map((message) => {\n                return (\n                    <div className=\"row message\" key={message.timestamp + \"-\" + message.message}>\n                        <span>{message.timestamp}</span> {message.message}\n                    </div>\n                );\n            })}\n        </div>\n    )\n})","import React from 'react';\nimport {action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport model from \"../model\";\n\nexport default observer(() => {\n    return(\n        <ul>\n            {model.state.connectedUsers.map((user) => {\n                return (\n                    <li key={user.name}>{user.name}</li>\n                );\n            })}\n        </ul>\n    )\n});","import React from 'react';\nimport {action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport axios from \"axios\";\nimport config from \"../config\";\nimport model from \"../model\";\nimport qs from 'querystring';\nimport \"./chatview.css\"\nimport Compose from \"../components/compose\"\nimport MessageList from \"../components/messagelist\"\nimport UserList from \"../components/userlist\"\n\n\nclass ChatView extends React.Component{\n\n    state = {\n        message: ''\n    }\n\n    componentDidMount(){\n        model.connectToChat(config.API_Host + \"/stream/\" + model.state.user.token);\n    }\n\n    sendMessage(message){\n        const body = {\n            \"message\": message,\n        }\n        \n        axios.post(config.API_Host + \"/message\", qs.stringify(body), {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Bearer ' + model.state.user.token\n            }\n        }).then(action((res) => {\n            console.log(\"response from /message: \" + JSON.stringify(res.data));\n            \n            model.state.error = null;\n        })).catch(action((err) => {\n            console.log(err);\n            model.state.error = \"failed to add message, status code: \" + err.response.status;\n        }));\n    }\n\n    \n\n    render() {\n\n        return (\n            <div className=\"container\" style={{height:\"100%\"}}>\n                <div className=\"page-header\">\n                    <h1>\n                        CS291 Chat <small> by Dana Nguyen and Gareth George</small>\n                    </h1>\n                    <br/>\n                </div>\n                <div className=\"row\" style={{height: \"100%\"}}>\n                    <div className=\"col-md-10\" style={{height: \"100%\"}}>\n                        <h2>Messages</h2>\n                        <MessageList/>\n                        {model.state.connectedToChat ? <Compose sendMessage={this.sendMessage.bind(this)} /> : null}\n                    </div>\n                    <div className=\"col-md-2\" style={{height:\"100%\"}}>\n                        <div className=\"usercontainer\">\n                            <h2>Users</h2>\n                            <UserList/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default observer(ChatView);","import React from \"react\";\n\nexport default (props) => {\n    if (!props.error) {\n        return (<div></div>)\n    }\n    \n    return (\n        <div style={{\n            borderStyle: \"solid\",\n            borderColor: \"red\",\n            padding: \"0.25em\",\n            width: \"100%\",\n        }}>\n            <span style={{color: \"red\", fontSize: \"2em\"}}>{props.error}</span>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {observer} from \"mobx-react\";\n\nimport LoginView from \"./views/loginview\";\nimport ChatView from \"./views/chatview\";\nimport ErrorSplash from \"./components/errorsplash\";\nimport model from \"./model\";\n\nclass App extends React.Component{\n  state = {}\n\n  render() {\n    let content = null;\n    if (model.state.user) {\n      content = (\n      <div>\n          <ChatView/>\n      </div>\n      )\n    } else {\n      content = (\n        <div>\n          \n          <LoginView/>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <ErrorSplash error={model.state.error} />\n        {content}\n      </div>\n    )\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}